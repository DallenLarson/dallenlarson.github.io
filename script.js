const $=(q,el=document)=>el.querySelector(q), $$=(q,el=document)=>[...el.querySelectorAll(q)];
const projects=[
 {title:"Epicor Kinetic: Ops Dashboard & Automations",summary:"Streamlined multi‑step ops with BAQs/BPMs, REST glue, and custom workflows.",tags:["ERP","Full-stack"],cover:"assets/epicor.png",body:`<h4>Context</h4><p>Manual workflows slowed reporting and increased errors. Goal: consolidate actions and automate rules.</p><h4>Solution</h4><ul><li>Kinetic UI dashboard aggregating status, exceptions, and actions</li><li>Updatable BAQs with validation to cut rework</li><li>BPM automations and REST integrations</li></ul><h4>Impact</h4><p>~40% faster daily reports and fewer manual errors</p>`},
 {title:"Clay‑Time™: Performance & Gameplay Systems",summary:"130+ scripts, physics optimization, and async loading for smoother playtests.",tags:["Unity","Performance","Multiplayer"],cover:"assets/clay.png",body:`<h4>Role</h4><p>Led gameplay engineering and performance work. Owned profiling + iteration loops.</p><h4>Highlights</h4><ul><li>Batched allocations & hot‑path refactors</li><li>Asynchronous loading for heavy assets</li><li>Mechanics sandbox for rapid iteration</li></ul><p><strong>Impact:</strong> ~60% fewer frame drops, +40% average session length.</p>`},
 {title:"Cross Impact: Multiplayer Architecture & Tools",summary:"Photon PUN architecture, hitbox consistency, and internal tools for balancing.",tags:["GameMaker Studio 2","Multiplayer"],cover:"assets/crossimpact.png",body:`<h4>Focus</h4><ul><li>Photon PUN input/state sync</li><li>Hitbox visualization & frame‑step tools</li><li>Checks for rollback‑like robustness</li></ul>`}
];
const onIntersect=new IntersectionObserver(entries=>{entries.forEach(e=>{if(e.isIntersecting){e.target.classList.add('show');onIntersect.unobserve(e.target)}})},{threshold:.1}); $$('.reveal').forEach(el=>onIntersect.observe(el));
const sections=$$('#home,#projects,#experience,#about,#contact'), navLinks=$$('header nav a');
const setActive=()=>{let idx=sections.findIndex(s=>s.getBoundingClientRect().top-100>0)-1; if(idx<0) idx=sections.length-1; navLinks.forEach(l=>l.classList.remove('active')); const id=sections[idx]?.id; const link=$$('header nav a').find(a=>a.getAttribute('href')==='#'+id); link&&link.classList.add('active')}; document.addEventListener('scroll', setActive);
$('#year').textContent=new Date().getFullYear();
const grid=$('#projectGrid'); function renderProjects(list){grid.innerHTML=''; list.forEach(p=>{const card=document.createElement('article'); card.className='card'; card.tabIndex=0; card.innerHTML=`<div class="cover" style="background-image:url('${p.cover}')"></div><h3>${p.title}</h3><p>${p.summary}</p><div class="badges">${p.tags.map(t=>`<span class="badge">${t}</span>`).join('')}</div>`; card.addEventListener('click',()=>openModal(p)); card.addEventListener('keypress',e=>{if(e.key==='Enter') openModal(p)}); grid.appendChild(card)})} renderProjects(projects);
const chips=$$('.chip'), search=$('#search'); let activeTags=new Set(); chips.forEach(chip=>{chip.addEventListener('click',()=>{const tag=chip.dataset.tag; if(activeTags.has(tag)){activeTags.delete(tag); chip.classList.remove('active')} else{activeTags.add(tag); chip.classList.add('active')} applyFilters()})}); search.addEventListener('input', applyFilters);
function applyFilters(){const q=search.value.toLowerCase(); const filtered=projects.filter(p=>{const matchQ=p.title.toLowerCase().includes(q)||p.summary.toLowerCase().includes(q); const matchTags=activeTags.size===0||[...activeTags].every(t=>p.tags.includes(t)); return matchQ&&matchTags}); renderProjects(filtered)}
//const modal=$('#modal'); $('.modal-close').addEventListener('click',()=>modal.close()); modal.addEventListener('click',e=>{if(e.target===modal) modal.close()});
//function openModal(project){$('#modalTitle').textContent=project.title; $('.modal-sub').textContent=project.tags.join(' • '); $('.modal-body').innerHTML=project.body; modal.showModal()}

  